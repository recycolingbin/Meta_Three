import"./style.css";import*as THREE from"three";import{GLTFLoader}from"three/examples/jsm/loaders/GLTFLoader";const canvas=document.querySelector("canvas"),scene=new THREE.Scene,camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,.1,1e3);camera.position.set(0,10,0);const gltfLoader=new GLTFLoader;gltfLoader.load("/model/swedish-royal/anna.gltf",(e=>{console.log("Model loaded!",e);const o=e.scene;scene.add(o)}),void 0,(e=>{console.error("An error happened while loading the model",e)}));const joystick=document.querySelector(".joystick"),stick=document.querySelector(".stick"),joystickRadius=50;let isJoystickActive=!1;const moveCameraFromJoystick=(e,o)=>{const n=new THREE.Vector3;camera.getWorldDirection(n),n.y=0,n.normalize();const t=new THREE.Vector3;t.crossVectors(n,camera.up),camera.position.add(n.multiplyScalar(.1*o)),camera.position.add(t.multiplyScalar(.1*e))},handleTouchStart=e=>{isJoystickActive=!0},handleTouchMove=e=>{if(isJoystickActive){const o=e.touches[0],n=joystick.getBoundingClientRect(),t=n.left+50,i=n.top+50;let a=o.clientX-t,s=o.clientY-i;const r=Math.sqrt(a**2+s**2),c=Math.atan2(s,a);r>50&&(a=50*Math.cos(c),s=50*Math.sin(c)),stick.style.transform=`translate(${a}px, ${s}px)`,moveCameraFromJoystick(a/50,s/50)}},handleTouchEnd=()=>{isJoystickActive=!1,stick.style.transform="translate(0, 0)"};joystick.addEventListener("touchstart",handleTouchStart),joystick.addEventListener("touchmove",handleTouchMove),joystick.addEventListener("touchend",handleTouchEnd);let isMouseDown=!1;const onMouseDownPosition=new THREE.Vector2,onPointerDown=e=>{isMouseDown=!0,onMouseDownPosition.set(e.clientX||e.touches[0].clientX,e.clientY||e.touches[0].clientY)},onPointerUp=()=>{isMouseDown=!1},onPointerMove=e=>{if(isMouseDown){const o=e.clientX||e.touches[0].clientX,n=e.clientY||e.touches[0].clientY,t=o-onMouseDownPosition.x,i=n-onMouseDownPosition.y;cameraRotation.pitch-=.002*i,cameraRotation.yaw-=.002*t,cameraRotation.pitch=Math.max(-Math.PI/2+.1,Math.min(Math.PI/2-.1,cameraRotation.pitch)),cameraRotation.yaw=cameraRotation.yaw%(2*Math.PI);const a=new THREE.Quaternion;a.setFromEuler(new THREE.Euler(cameraRotation.pitch,cameraRotation.yaw,0,"YXZ")),camera.quaternion.copy(a),onMouseDownPosition.set(o,n)}};window.addEventListener("mousedown",onPointerDown),window.addEventListener("mouseup",onPointerUp),window.addEventListener("mousemove",onPointerMove),window.addEventListener("touchstart",onPointerDown),window.addEventListener("touchend",onPointerUp),window.addEventListener("touchmove",onPointerMove);const renderer=new THREE.WebGLRenderer({canvas,alpha:!0});renderer.setSize(window.innerWidth,window.innerHeight);const onWindowResize=()=>{camera.aspect=window.innerWidth/window.innerHeight,camera.updateProjectionMatrix(),renderer.setSize(window.innerWidth,window.innerHeight)};window.addEventListener("resize",onWindowResize);const keysPressed={};let walkingTime=0;const stepDistance=1;let isWalking=!1;const moveCamera=()=>{const e=new THREE.Vector3,o=new THREE.Vector3;camera.getWorldDirection(e),e.y=0,e.normalize(),keysPressed.KeyA||keysPressed.ArrowLeft?(camera.position.add(o.crossVectors(e,camera.up).multiplyScalar(-1)),isWalking=!0):keysPressed.KeyD||keysPressed.ArrowRight?(camera.position.add(o.crossVectors(e,camera.up).multiplyScalar(1)),isWalking=!0):keysPressed.KeyS||keysPressed.ArrowDown?(camera.position.add(e.clone().negate().multiplyScalar(1)),isWalking=!0):keysPressed.KeyW||keysPressed.ArrowUp?(camera.position.add(e.multiplyScalar(1)),isWalking=!0):isWalking=!1},onKeyDown=e=>{e.preventDefault(),keysPressed[e.code]=!0},onKeyUp=e=>{keysPressed[e.code]=!1};window.addEventListener("keydown",onKeyDown),window.addEventListener("keyup",onKeyUp);const animate=()=>{moveCamera(),renderer.render(scene,camera),requestAnimationFrame(animate)};animate();